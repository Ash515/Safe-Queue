'use strict';

var _require = require('./errors'),
    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;

/*
import {
  // isBrowser,
  isMobile,
  //isChrome,
  isIOS,
  isSafari,
  isAndroid
} from "../../react-device-detect";
*/

function defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {
  if (filteredDevices.length > 0) {

    /*
     * DJC Modified since the original code doesn't work on Samsung S20 and S10
     * github had a fix (no merged) called "fixed samsung multiple cameras #154"
     *
     * I found this worked for the S20, but it also broke iOS/Safari, in which it always
     * chose the rear-facing camera instead of the front-facing camera.
     *
     * So, the logic below is this:
     *      if(Android)
     *         do the fix in #154
     *      else
     *         do what it used to do
     *
     * This seems to work.
     */   
     
    function labelCompare(a, b) {
       if (a.label < b.label ){
         return -1;
       }
       if (a.label > b.label){
         return 1;
       }
       return 0;
    }

    if(window.navigator.appVersion.indexOf('Android') !== -1) {
        filteredDevices.sort(labelCompare);
    }
    
    return filteredDevices[0].deviceId;
  }
  if (videoDevices.length == 1 || facingMode == 'user') {
    return videoDevices[0].deviceId;
  }
  return videoDevices[1].deviceId;
}

var getFacingModePattern = function getFacingModePattern(facingMode) {
  return facingMode == 'environment' ? /rear|back|environment/ig : /front|user|face/ig;
};

function getDeviceId(facingMode) {
  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser;

  // Get manual deviceId from available devices.
  return new Promise(function (resolve, reject) {
    var enumerateDevices = void 0;
    try {
      enumerateDevices = navigator.mediaDevices.enumerateDevices();
    } catch (err) {
      reject(new NoVideoInputDevicesError());
    }
    enumerateDevices.then(function (devices) {
      // Filter out non-videoinputs
      var videoDevices = devices.filter(function (device) {
        return device.kind == 'videoinput';
      });

      if (videoDevices.length < 1) {
        reject(new NoVideoInputDevicesError());
        return;
      }

      var pattern = getFacingModePattern(facingMode);

      // Filter out video devices without the pattern
      var filteredDevices = videoDevices.filter(function (_ref) {
        var label = _ref.label;
        return pattern.test(label);
      });

      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode));
    });
  });
}

module.exports = { getDeviceId: getDeviceId, getFacingModePattern: getFacingModePattern };